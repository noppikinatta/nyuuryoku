// CODE GENERATED BY genapis.go. DO NOT EDIT.

package nyuuryoku

import (
	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/inpututil"
)

type Keyboard struct {
	isKeyPressedFn           func(key ebiten.Key) bool
	isKeyJustPressedFn       func(key ebiten.Key) bool
	isKeyJustReleasedFn      func(key ebiten.Key) bool
	keyPressDurationFn       func(key ebiten.Key) int
	keyNameFn                func(key ebiten.Key) string
	appendPressedKeysFn      func(keys []ebiten.Key) []ebiten.Key
	appendJustPressedKeysFn  func(keys []ebiten.Key) []ebiten.Key
	appendJustReleasedKeysFn func(keys []ebiten.Key) []ebiten.Key
	appendInputCharsFn       func(runes []rune) []rune
}

func NewKeyboard() *Keyboard {
	k := &Keyboard{}
	s := NewKeyboardSetter(k)
	s.SetDefault()

	return k
}

func (k *Keyboard) IsPressed(key ebiten.Key) bool {
	return k.isKeyPressedFn(key)
}
func (k *Keyboard) IsJustPressed(key ebiten.Key) bool {
	return k.isKeyJustPressedFn(key)
}
func (k *Keyboard) IsJustReleased(key ebiten.Key) bool {
	return k.isKeyJustReleasedFn(key)
}
func (k *Keyboard) PressDuration(key ebiten.Key) int {
	return k.keyPressDurationFn(key)
}
func (k *Keyboard) Name(key ebiten.Key) string {
	return k.keyNameFn(key)
}
func (k *Keyboard) AppendPressed(keys []ebiten.Key) []ebiten.Key {
	return k.appendPressedKeysFn(keys)
}
func (k *Keyboard) AppendJustPressed(keys []ebiten.Key) []ebiten.Key {
	return k.appendJustPressedKeysFn(keys)
}
func (k *Keyboard) AppendJustReleased(keys []ebiten.Key) []ebiten.Key {
	return k.appendJustReleasedKeysFn(keys)
}
func (k *Keyboard) AppendInputChars(runes []rune) []rune {
	return k.appendInputCharsFn(runes)
}

type KeyboardSetter struct {
	keyboard *Keyboard
}

func NewKeyboardSetter(k *Keyboard) *KeyboardSetter {
	return &KeyboardSetter{}
}

func (s *KeyboardSetter) SetDefault() {
	s.SetIsPressedFunc(ebiten.IsKeyPressed)
	s.SetIsJustPressedFunc(inpututil.IsKeyJustPressed)
	s.SetIsJustReleasedFunc(inpututil.IsKeyJustReleased)
	s.SetPressDurationFunc(inpututil.KeyPressDuration)
	s.SetNameFunc(ebiten.KeyName)
	s.SetAppendPressedFunc(inpututil.AppendPressedKeys)
	s.SetAppendJustPressedFunc(inpututil.AppendJustPressedKeys)
	s.SetAppendJustReleasedFunc(inpututil.AppendJustReleasedKeys)
	s.SetAppendInputCharsFunc(ebiten.AppendInputChars)

}

func (s *KeyboardSetter) SetIsPressedFunc(fn func(key ebiten.Key) bool) {
	s.keyboard.isKeyPressedFn = fn
}
func (s *KeyboardSetter) SetIsJustPressedFunc(fn func(key ebiten.Key) bool) {
	s.keyboard.isKeyJustPressedFn = fn
}
func (s *KeyboardSetter) SetIsJustReleasedFunc(fn func(key ebiten.Key) bool) {
	s.keyboard.isKeyJustReleasedFn = fn
}
func (s *KeyboardSetter) SetPressDurationFunc(fn func(key ebiten.Key) int) {
	s.keyboard.keyPressDurationFn = fn
}
func (s *KeyboardSetter) SetNameFunc(fn func(key ebiten.Key) string) {
	s.keyboard.keyNameFn = fn
}
func (s *KeyboardSetter) SetAppendPressedFunc(fn func(keys []ebiten.Key) []ebiten.Key) {
	s.keyboard.appendPressedKeysFn = fn
}
func (s *KeyboardSetter) SetAppendJustPressedFunc(fn func(keys []ebiten.Key) []ebiten.Key) {
	s.keyboard.appendJustPressedKeysFn = fn
}
func (s *KeyboardSetter) SetAppendJustReleasedFunc(fn func(keys []ebiten.Key) []ebiten.Key) {
	s.keyboard.appendJustReleasedKeysFn = fn
}
func (s *KeyboardSetter) SetAppendInputCharsFunc(fn func(runes []rune) []rune) {
	s.keyboard.appendInputCharsFn = fn
}
